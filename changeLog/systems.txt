\systems
	\RenderingSystem.java...
		"package com.valleco.ravencrest.systems;

		import com.badlogic.ashley.core.Entity;
		import com.badlogic.ashley.core.Family;
		import com.badlogic.ashley.systems.IteratingSystem;
		import com.badlogic.gdx.graphics.g2d.SpriteBatch;
		import com.valleco.ravencrest.components.PositionComponent;
		import com.valleco.ravencrest.components.RenderComponent;

		public class RenderingSystem extends IteratingSystem {

			private final SpriteBatch batch;

			// Construtor do sistema, configurando para operar em entidades com PositionComponent e RenderComponent
			public RenderingSystem(SpriteBatch batch){
				super(Family.all(PositionComponent.class, RenderComponent.class).get());
				this.batch = batch;
			}

			@Override
			protected void processEntity(Entity entity, float deltaTime){
				PositionComponent position = entity.getComponent(PositionComponent.class);
				RenderComponent render = entity.getComponent(RenderComponent.class);

				batch.begin();
				batch.draw(render.texture, position.position.x, position.position.y);
				batch.end();
			}
		}"

	\InputSystem.java...
		"package com.valleco.ravencrest.systems;

		import com.badlogic.ashley.core.Entity;
		import com.badlogic.ashley.core.Family;
		import com.badlogic.ashley.systems.IteratingSystem;
		import com.badlogic.gdx.Gdx;
		import com.badlogic.gdx.Input;
		import com.valleco.ravencrest.components.PlayerComponent;
		import com.valleco.ravencrest.components.PositionComponent;

		public class InputSystem extends IteratingSystem {

			private static final float SPEED = 100f; // Velocidade de movimento

			public InputSystem(){
				// O sistema só vai processar entidades que possuem o PositionComponent
				super(Family.all(PositionComponent.class, PlayerComponent.class).get());
			}

			@Override
			protected void processEntity(Entity entity, float deltaTime){
				PositionComponent position = entity.getComponent(PositionComponent.class);

				// Verificar as entradas de teclado e ajustar a posição
				if(Gdx.input.isKeyPressed(Input.Keys.LEFT)){
					position.position.x -= SPEED * deltaTime;
				}
				if(Gdx.input.isKeyPressed(Input.Keys.RIGHT)){
					position.position.x += SPEED * deltaTime;
				}
				if(Gdx.input.isKeyPressed(Input.Keys.UP)){
					position.position.y += SPEED * deltaTime;
				}
				if(Gdx.input.isKeyPressed(Input.Keys.DOWN)){
					position.position.y -= SPEED * deltaTime;
				}
			}
		}"

	\MovementSystem.java...
		"package com.valleco.ravencrest.systems;

		import com.badlogic.ashley.core.Entity;
		import com.badlogic.ashley.core.Family;
		import com.badlogic.ashley.systems.IteratingSystem;
		import com.valleco.ravencrest.components.PositionComponent;
		import com.valleco.ravencrest.components.VelocityComponent;

		public class MovementSystem extends IteratingSystem {

			public MovementSystem() {
				// Processar apenas entidades com PositionComponent e VelocityComponent
				super(Family.all(PositionComponent.class, VelocityComponent.class).get());
			}

			@Override
			protected void processEntity(Entity entity, float deltaTime) {
				PositionComponent position = entity.getComponent(PositionComponent.class);
				VelocityComponent velocity = entity.getComponent(VelocityComponent.class);

				// Atualizar a posição com base na velocidade
				position.position.x += velocity.velocity.x * deltaTime;
				position.position.y += velocity.velocity.y * deltaTime;
			}
		}"

	\PickupSystem.java...
		"package com.valleco.ravencrest.systems;

        import com.badlogic.ashley.core.Entity;
        import com.badlogic.ashley.core.Family;
        import com.badlogic.ashley.systems.IteratingSystem;
        import com.valleco.ravencrest.components.PickupComponent;
        import com.valleco.ravencrest.components.PositionComponent;

        public class PickupSystem extends IteratingSystem {

            private static final float PICKUP_RADIUS = 10f; // Raio de coleta
            private Entity player; // Referência ao jogador

            public PickupSystem(Entity player) {
                // O sistema deve processar todas as entidades que possuem PositionComponent e PickupComponent
                super(Family.all(PositionComponent.class, PickupComponent.class).get());
                this.player = player;
            }

            @Override
            protected void processEntity(Entity item, float deltaTime) {
                PositionComponent itemPosition = item.getComponent(PositionComponent.class);
                PositionComponent playerPosition = player.getComponent(PositionComponent.class);

                // Verificar a distância entre o jogador e o item
                float distance = playerPosition.position.dst(itemPosition.position);

                // Se a distância for menor que o raio de coleta, remover o item
                if (distance < PICKUP_RADIUS) {
                    getEngine().removeEntity(item); // Remover o item do jogo
                }
            }
        }"

